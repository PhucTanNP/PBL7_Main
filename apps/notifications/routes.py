from flask import Blueprint, request, jsonify
from apps import db
from apps.notifications.models import Notification
from apps.jobs.models import Job
from flask import jsonify
from flask_login import login_required, current_user
from flask import url_for

# Kh·ªüi t·∫°o blueprint cho notifications
notifications_blueprint = Blueprint('notifications_blueprint', __name__, url_prefix='/notifications')

@notifications_blueprint.route('/create', methods=['POST'])
@login_required
def create_notification():
    data = request.get_json()

    user_id = data.get('user_id')     # Ng∆∞·ªùi nh·∫≠n th√¥ng b√°o (HR)
    job_id = data.get('job_id')       # C√¥ng vi·ªác ƒë∆∞·ª£c ·ª©ng tuy·ªÉn
    type = data.get('type')           # Lo·∫°i th√¥ng b√°o

    print("[DEBUG] Notification received:", data)

    # Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if not user_id or not job_id or not type:
        print("[ERROR] Missing data: user_id={}, job_id={}, type={}".format(user_id, job_id, type))
        return jsonify({'success': False, 'message': 'Missing data'}), 400

    try:
        # T·∫°o th√¥ng b√°o v·ªõi applicant_id l√† ng∆∞·ªùi ƒëang ƒëƒÉng nh·∫≠p
        notification = Notification(
            user_id=user_id,              # Ng∆∞·ªùi nh·∫≠n (HR)
            job_id=job_id,
            applicant_id=current_user.id_user,  # Ng∆∞·ªùi n·ªôp ƒë∆°n (·ª©ng vi√™n)
            type='new_application',
            status='unread'
        )

        print("[DEBUG] Notification object:", notification)

        db.session.add(notification)
        db.session.commit()

        print("[DEBUG] Notification created successfully")
        return jsonify({'success': True, 'message': 'Notification created successfully'})

    except Exception as e:
        print("[ERROR] Error creating notification:", e)
        return jsonify({'success': False, 'message': str(e)}), 500



# Route l·∫•y th√¥ng b√°o cho ng∆∞·ªùi d√πng
@notifications_blueprint.route('/get', methods=['GET'])
@login_required
def get_notifications():
    user_id = current_user.id_user
    role = current_user.role  # 'HR' ho·∫∑c 'Seeker'

    notifications = Notification.query \
        .filter_by(user_id=user_id) \
        .order_by(Notification.created_at.desc()) \
        .limit(10).all()

    notifications_data = []
    for notif in notifications:
        title = "Th√¥ng b√°o"
        message = "B·∫°n c√≥ m·ªôt th√¥ng b√°o m·ªõi."

        # ‚úÖ N·∫øu l√† HR v√† nh·∫≠n th√¥ng b√°o c√≥ ng∆∞·ªùi apply
        if role == 'HR' and notif.type == 'new_application':
            title = "·ª®ng vi√™n m·ªõi"
            message = (
                f"{notif.applicant.full_name} v·ª´a apply v√†o c√¥ng vi·ªác: {notif.job.job_title}"
                if notif.applicant and notif.job else "C√≥ ·ª©ng vi√™n m·ªõi ·ª©ng tuy·ªÉn"
            )

        # ‚úÖ N·∫øu l√† Seeker v√† nh·∫≠n th√¥ng b√°o duy·ªát/ t·ª´ ch·ªëi
        elif role == 'Seeker':
            if notif.type == 'approved':
                title = "ƒê∆°n ƒë∆∞·ª£c duy·ªát"
                message = (
                    f"üéâ ƒê∆°n ·ª©ng tuy·ªÉn c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c duy·ªát cho c√¥ng vi·ªác: {notif.job.job_title}"
                    if notif.job else "ƒê∆°n ƒë√£ ƒë∆∞·ª£c duy·ªát."
                )
            elif notif.type == 'rejected':
                title = "Th√¥ng b√°o: ƒê∆°n ·ª©ng tuy·ªÉn b·ªã t·ª´ ch·ªëi"
                message = (
                    f"üòû R·∫•t ti·∫øc! ƒê∆°n ·ª©ng tuy·ªÉn c·ªßa b·∫°n ƒë√£ b·ªã t·ª´ ch·ªëi cho c√¥ng vi·ªác: {notif.job.job_title}"
                    if notif.job else "ƒê∆°n ƒë√£ b·ªã t·ª´ ch·ªëi."
                )
            else:
                continue  # N·∫øu seeker m√† g·∫∑p type kh√°c th√¨ b·ªè qua

        else:
            continue  # N·∫øu HR g·∫∑p type kh√¥ng ph·∫£i 'new_application' th√¨ b·ªè qua

        # Avatar: d√πng avatar ·ª©ng vi√™n n·∫øu c√≥, fallback ·∫£nh m·∫∑c ƒë·ªãnh
        avatar = (
            url_for('static', filename=f'uploads/avatar/{notif.applicant.avatar_file}')
            if notif.applicant and notif.applicant.avatar_file
            else url_for('static', filename='assets/images/user/avatar-default.jpg')
        )

        notifications_data.append({
            'id': notif.id_notification,
            'title': title,
            'message': message,
            'created_at': notif.created_at.strftime('%H:%M %d/%m/%Y'),
            'status': notif.status,
            'avatar': avatar,
        })

    return jsonify({'success': True, 'notifications': notifications_data})

# Route ƒë√°nh d·∫•u th√¥ng b√°o l√† ƒë√£ ƒë·ªçc
@notifications_blueprint.route('/mark_read', methods=['POST'])
def mark_notification_read():
    notification_id = request.get_json().get('notification_id')

    if not notification_id:
        return jsonify({'success': False, 'message': 'Notification ID is required'}), 400

    notification = Notification.query.get(notification_id)
    if notification:
        notification.status = 'read'
        db.session.commit()
        return jsonify({'success': True, 'message': 'Notification marked as read'})

    return jsonify({'success': False, 'message': 'Notification not found'}), 404
@notifications_blueprint.route('/clear_all', methods=['POST'])
@login_required
def clear_all_notifications():
    try:
        Notification.query.filter_by(user_id=current_user.id_user).delete()
        db.session.commit()
        return jsonify({'success': True, 'message': 'ƒê√£ xo√° t·∫•t c·∫£ th√¥ng b√°o'})
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': str(e)}), 500
@notifications_blueprint.route('/mark_all_read', methods=['POST'])
@login_required
def mark_all_notifications_read():
    try:
        notifications = Notification.query.filter_by(user_id=current_user.id_user, status='unread').all()
        for notif in notifications:
            notif.status = 'read'
        db.session.commit()
        return jsonify({'success': True, 'message': 'T·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† ƒë√£ ƒë·ªçc'})
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': str(e)}), 500